From 8722f1ccb9b2010f1a65191b61975946d2ba5752 Mon Sep 17 00:00:00 2001
From: Chen-Yu Tsai <wens@csie.org>
Date: Fri, 19 Dec 2014 01:02:37 +0800
Subject: [PATCH] fixup! clk: sunxi: Add support for sun9i a80 usb clocks and
 resets

---
 drivers/clk/sunxi/clk-usb.c | 43 +++++++++++++++++--------------------------
 1 file changed, 17 insertions(+), 26 deletions(-)

diff --git a/drivers/clk/sunxi/clk-usb.c b/drivers/clk/sunxi/clk-usb.c
index 2d1e3b7c..0f56a30 100644
--- a/drivers/clk/sunxi/clk-usb.c
+++ b/drivers/clk/sunxi/clk-usb.c
@@ -29,6 +29,7 @@
 struct usb_reset_data {
 	void __iomem			*reg;
 	spinlock_t			*lock;
+	struct clk			*clk;
 	struct reset_controller_dev	rcdev;
 };
 
@@ -41,12 +42,14 @@ static int sunxi_usb_reset_assert(struct reset_controller_dev *rcdev,
 	unsigned long flags;
 	u32 reg;
 
+	clk_prepare_enable(data->clk);
 	spin_lock_irqsave(data->lock, flags);
 
 	reg = readl(data->reg);
 	writel(reg & ~BIT(id), data->reg);
 
 	spin_unlock_irqrestore(data->lock, flags);
+	clk_disable_unprepare(data->clk);
 
 	return 0;
 }
@@ -60,12 +63,14 @@ static int sunxi_usb_reset_deassert(struct reset_controller_dev *rcdev,
 	unsigned long flags;
 	u32 reg;
 
+	clk_prepare_enable(data->clk);
 	spin_lock_irqsave(data->lock, flags);
 
 	reg = readl(data->reg);
 	writel(reg | BIT(id), data->reg);
 
 	spin_unlock_irqrestore(data->lock, flags);
+	clk_disable_unprepare(data->clk);
 
 	return 0;
 }
@@ -84,8 +89,7 @@ static struct reset_control_ops sunxi_usb_reset_ops = {
 struct usb_clk_data {
 	u32 clk_mask;
 	u32 reset_mask;
-	/* which parent to use, should match clock-output-names */
-	char parents[SUNXI_USB_MAX_SIZE];
+	bool reset_needs_clk;
 };
 
 static void __init sunxi_usb_clk_setup(struct device_node *node,
@@ -103,6 +107,10 @@ static void __init sunxi_usb_clk_setup(struct device_node *node,
 
 	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
 
+	clk_parent = of_clk_get_parent_name(node, 0);
+	if (!clk_parent)
+		return;
+
 	/* Worst-case size approximation and memory allocation */
 	qty = find_last_bit((unsigned long *)&data->clk_mask,
 			    SUNXI_USB_MAX_SIZE);
@@ -119,8 +127,6 @@ static void __init sunxi_usb_clk_setup(struct device_node *node,
 			 SUNXI_USB_MAX_SIZE) {
 		of_property_read_string_index(node, "clock-output-names",
 					      j, &clk_name);
-		clk_parent = of_clk_get_parent_name(node, data->parents[j]);
-
 		clk_data->clks[i] = clk_register_gate(NULL, clk_name,
 						      clk_parent, 0,
 						      reg, i, 0, lock);
@@ -143,6 +149,13 @@ static void __init sunxi_usb_clk_setup(struct device_node *node,
 	if (!reset_data)
 		return;
 
+	if (data->reset_needs_clk)
+		reset_data->clk = of_clk_get(node, 0);
+	if (IS_ERR(reset_data->clk)) {
+		pr_err("Could not get clock for reset controls\n");
+		kfree(reset_data);
+		return;
+	}
 	reset_data->reg = reg;
 	reset_data->lock = lock;
 	reset_data->rcdev.nr_resets = __fls(data->reset_mask) + 1;
@@ -154,23 +167,12 @@ static void __init sunxi_usb_clk_setup(struct device_node *node,
 static const struct usb_clk_data sun9i_a80_usb_mod_data __initconst = {
 	.clk_mask = BIT(6) | BIT(5) | BIT(4) | BIT(3) | BIT(2) | BIT(1),
 	.reset_mask = BIT(19) | BIT(18) | BIT(17),
-	.parents = {0, 1, 0, 1, 0, 1},
 };
 
 static DEFINE_SPINLOCK(a80_usb_mod_lock);
 
 static void __init sun9i_a80_usb_mod_setup(struct device_node *node)
 {
-	/*
-	 * AHB1 gate must be enabled to access registers.
-	 * Since most of the gates registered here don't have
-	 * the AHB1 gate as their parent, just enable it here.
-	 */
-	struct clk *ahb = of_clk_get(node, 0);
-
-	WARN_ON(IS_ERR(ahb));
-	clk_prepare_enable(ahb);
-
 	sunxi_usb_clk_setup(node, &sun9i_a80_usb_mod_data, &a80_usb_mod_lock);
 }
 CLK_OF_DECLARE(sun9i_a80_usb_mod, "allwinner,sun9i-a80-usb-mod-clk", sun9i_a80_usb_mod_setup);
@@ -178,23 +180,12 @@ CLK_OF_DECLARE(sun9i_a80_usb_mod, "allwinner,sun9i-a80-usb-mod-clk", sun9i_a80_u
 static const struct usb_clk_data sun9i_a80_usb_phy_data __initconst = {
 	.clk_mask = BIT(10) | BIT(5) | BIT(4) | BIT(3) | BIT(2) | BIT(1),
 	.reset_mask = BIT(21) | BIT(20) | BIT(19) | BIT(18) | BIT(17),
-	.parents = {1, 1, 1, 1, 1, 1},
 };
 
 static DEFINE_SPINLOCK(a80_usb_phy_lock);
 
 static void __init sun9i_a80_usb_phy_setup(struct device_node *node)
 {
-	/*
-	 * AHB1 gate must be enabled to access registers.
-	 * Since the gates registered here don't have the AHB1
-	 * gate as their parent, just enable it here.
-	 */
-	struct clk *ahb = of_clk_get(node, 0);
-
-	WARN_ON(IS_ERR(ahb));
-	clk_prepare_enable(ahb);
-
 	sunxi_usb_clk_setup(node, &sun9i_a80_usb_phy_data, &a80_usb_phy_lock);
 }
 CLK_OF_DECLARE(sun9i_a80_usb_phy, "allwinner,sun9i-a80-usb-phy-clk", sun9i_a80_usb_phy_setup);
-- 
2.1.3

